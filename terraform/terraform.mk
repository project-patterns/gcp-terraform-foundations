### Terraform - infrastructure management
MODULE ?= ${MOD}
WORKSPACE ?= ${WORK}
TF_MODULE ?= ${MODULE}
TF_WORKSPACE ?= ${WORKSPACE}
TF_PLAN ?= ${PLAN}
TF_BACKEND ?= ${BACKEND}

ifneq ($(TF_BACKEND),)
TF_BACKEND_OPT_FILE := -backend-config=../../backends/${TF_BACKEND}.hcl
endif

TF_BACKEND_OPTS_LOCAL := ${TF_BACKEND_OPT_FILE}
TF_BACKEND_OPTS_GCS := ${TF_BACKEND_OPT_FILE} -backend-config="prefix=backends/${TF_MODULE}"

ifeq ($(TF_BACKEND), bootstrap-local)
TF_BACKEND_OPTS := $(TF_BACKEND_OPTS_LOCAL)
else
TF_BACKEND_OPTS := $(TF_BACKEND_OPTS_GCS)
endif

tf.optsMod:
	@if [ -z "${TF_MODULE}" ]; then echo "MOD not provided"; exit 1; fi
.PHONY: tf.optsMod

tf.optsBackend:
	@if [ -z "${TF_BACKEND}" ]; then echo "BACKEND not provided"; exit 1; fi
.PHONY: tf.optsBackend

tf.optsPlan:
	@if [ -z "${TF_PLAN}" ]; then echo "PLAN not provided"; exit 1; fi
.PHONY: tf.optsPlan

tf.optsWorkspace:
	@if [ -z "${TF_WORKSPACE}" ]; then echo "WORK not provided"; exit 1; fi
.PHONY: tf.optsWorkspace

## Initialise terraform
tf.init: tf.optsMod tf.optsBackend
	env TF_WORKSPACE=${TF_WORKSPACE} ./tools/terraform -chdir=terraform/modules/${TF_MODULE} init ${TF_BACKEND_OPTS}
ifneq ($(TF_WORKSPACE),)
	$(MAKE) tf.workspace
endif
.PHONY: tf.init

## Initialise terraform and upgrade dependencies
tf.initUpgrade: tf.optsMod tf.optsBackend
	env TF_WORKSPACE=${TF_WORKSPACE} ./tools/terraform -chdir=terraform/modules/${TF_MODULE} init -upgrade ${TF_BACKEND_OPTS}
ifneq ($(TF_WORKSPACE),)
	$(MAKE) tf.workspace
endif
.PHONY: tf.initUpgrade

## Initialise terraform
tf.initConfigure: tf.optsMod tf.optsBackend
	env TF_WORKSPACE=${TF_WORKSPACE} ./tools/terraform -chdir=terraform/modules/${TF_MODULE} init -reconfigure ${TF_BACKEND_OPTS}
ifneq ($(TF_WORKSPACE),)
	$(MAKE) tf.workspace
endif
.PHONY: tf.initConfigure

## Set active terraform workspace
tf.workspace: tf.optsMod tf.optsWorkspace
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} workspace select -or-create $(TF_WORKSPACE)
.PHONY: tf.workspace

## Generate a terraform plan
tf.plan: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} plan
.PHONY: tf.plan

## Generate a terraform plan and save it. This should be used by CICD systems
tf.planAuto: tf.optsMod tf.optsPlan
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} plan -out ${TF_PLAN}.tfplan
.PHONY: tf.planAuto

## Generate a terraform plan for only refreshing state
tf.planRefresh: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} plan -refresh-only
.PHONY: tf.planRefresh

## Generate a terraform plan for only refreshing state and save it. This should be used by CICD systems
tf.planRefreshAuto: tf.optsMod tf.optsPlan
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} plan -refresh-only -out ${TF_PLAN}.tfplan
.PHONY: tf.planRefreshAuto

## Generate a plan and apply it
tf.apply: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} apply
.PHONY: tf.apply

## Generate a plan for onlly refreshing state and apply it
tf.applyRefresh: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} apply -refresh-only
.PHONY: tf.applyRefresh

## Apply the terraform plan generated by planAuto. This should be used by CICD systems
tf.applyAuto: tf.optsMod tf.optsPlan
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} apply -auto-approve ${TF_PLAN}.tfplan
.PHONY: tf.applyAuto

## Destroy resources
tf.destroy: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} destroy
.PHONY: tf.destroy

## Destroy resources automatically
tf.destroyAuto: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} destroy -auto-approve
.PHONY: tf.destroyAuto

## Show the statefile
tf.show: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} show
.PHONY: tf.show

## Show terraform module outputs
tf.output: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} output -json > terraform/${TF_MODULE}/terraform.tfoutput.json
.PHONY: tf.output

## Validate terraform is syntactically correct
tf.validate: tf.optsMod
	./tools/terraform -chdir=terraform/modules/${TF_MODULE} validate
.PHONY: tf.validate
